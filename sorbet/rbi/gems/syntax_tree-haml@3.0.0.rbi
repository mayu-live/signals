# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree-haml` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree-haml`.

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#57
class Haml::Parser::ParseNode < ::Struct
  # source://haml/6.1.1/lib/haml/parser.rb#224
  def initialize(*args); end

  # Here we're going to hook into the parse node and define a method that will
  # accept a visitor in order to walk through the tree.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#60
  def accept(visitor); end

  def children; end
  def children=(_); end

  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#85
  def format(q); end

  # source://haml/6.1.1/lib/haml/parser.rb#229
  def inspect; end

  def line; end
  def line=(_); end
  def parent; end
  def parent=(_); end

  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#89
  def pretty_print(q); end

  def type; end
  def type=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#7
module SyntaxTree
  class << self
    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#79
    def format(source, maxwidth = T.unsafe(nil), base_indentation = T.unsafe(nil), options: T.unsafe(nil)); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#93
    def mutation; end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#72
    def parse(source); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#101
    def read(filepath); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#67
    def register_handler(extension, handler); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#116
    def search(source, query, &block); end
  end
end

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#63
SyntaxTree::DEFAULT_INDENTATION = T.let(T.unsafe(nil), Integer)

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#55
SyntaxTree::DEFAULT_PRINT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#59
SyntaxTree::DEFAULT_RUBY_VERSION = T.let(T.unsafe(nil), SyntaxTree::Formatter::SemanticVersion)

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#49
SyntaxTree::HANDLERS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#8
module SyntaxTree::Haml
  class << self
    # This is the main entrypoint for the formatter. It parses the source,
    # builds a formatter, then pretty prints the result.
    #
    # source://syntax_tree-haml//lib/syntax_tree/haml.rb#36
    def format(source, maxwidth = T.unsafe(nil), options: T.unsafe(nil)); end

    # This is the main parser entrypoint, and just delegates to the Haml gem's
    # parser to do the heavy lifting.
    #
    # source://syntax_tree-haml//lib/syntax_tree/haml.rb#30
    def parse(source); end

    # This is a required API for syntax tree which just delegates to File.read.
    #
    # source://syntax_tree-haml//lib/syntax_tree/haml.rb#45
    def read(filepath); end
  end
end

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#9
SyntaxTree::Haml::DOCTYPE_TYPES = T.let(T.unsafe(nil), Hash)

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#18
SyntaxTree::Haml::DOCTYPE_VERSIONS = T.let(T.unsafe(nil), Array)

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#5
class SyntaxTree::Haml::Format < ::SyntaxTree::Haml::Visitor
  # @return [Format] a new instance of Format
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#28
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#26
  def q; end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#html-comments-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#33
  def visit_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#doctype-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#47
  def visit_doctype(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#filter
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#63
  def visit_filter(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#haml-comments--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#86
  def visit_haml_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#plain-text
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#111
  def visit_plain(node); end

  # Visit the root node of the AST.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#122
  def visit_root(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#inserting_ruby
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#130
  def visit_script(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#running-ruby--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#144
  def visit_silent_script(node); end

  # Visit a tag node.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#308
  def visit_tag(node); end

  private

  # When printing out sequences of silent scripts, sometimes subsequent nodes
  # will be continuations of previous nodes. In that case we want to dedent
  # them to match.
  #
  # @return [Boolean]
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#416
  def continuation?(node, child); end

  # If a node comes in as the plain type but starts with one of the special
  # characters that haml parses, then we need to escape it with a \ when
  # printing.
  #
  # @return [Boolean]
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#432
  def escaped?(text); end

  # Take a source string and attempt to parse it into a set of attributes
  # that can be used to format the source.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#440
  def parse_attributes(source); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#453
  def with_children(node); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#6
class SyntaxTree::Haml::Format::Formatter < ::SyntaxTree::Formatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#9
  def initialize(source, *rest, options: T.unsafe(nil)); end

  # Returns the value of attribute literal_lines.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#7
  def literal_lines; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#220
class SyntaxTree::Haml::Format::HTMLAttributesPart
  # @return [HTMLAttributesPart] a new instance of HTMLAttributesPart
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#231
  def initialize(raw); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#238
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#250
  def length; end

  # Returns the value of attribute values.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#229
  def values; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#227
SyntaxTree::Haml::Format::HTMLAttributesPart::SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::Haml::Format::HTMLAttributesPart::Separator)

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#221
class SyntaxTree::Haml::Format::HTMLAttributesPart::Separator
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#222
  def call(q); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#255
class SyntaxTree::Haml::Format::HashAttributesPart < ::Struct
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#256
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#260
  def length; end

  private

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#268
  def format_value(q, hash, level = T.unsafe(nil)); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#163
class SyntaxTree::Haml::Format::LiteralHashValue < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# When formatting a tag, there are a lot of different kinds of things that
# can be printed out. There's the tag name, the attributes, the content,
# etc. This object is responsible for housing all of those parts.
#
# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#169
class SyntaxTree::Haml::Format::PartList
  # @return [PartList] a new instance of PartList
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#172
  def initialize(node); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#177
  def <<(part); end

  # @return [Boolean]
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#181
  def empty?; end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#185
  def format(q); end

  # Returns the value of attribute node.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
  def node; end

  # Returns the value of attribute parts.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
  def parts; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#200
class SyntaxTree::Haml::Format::PlainPart < ::Struct
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#201
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#205
  def length; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#210
class SyntaxTree::Haml::Format::PrefixPart < ::Struct
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#211
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#215
  def length; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#164
class SyntaxTree::Haml::Format::StringHashValue < ::Struct
  # Returns the value of attribute quote
  #
  # @return [Object] the current value of quote
  def quote; end

  # Sets the attribute quote
  #
  # @param value [Object] the value to set the attribute quote to.
  # @return [Object] the newly set value
  def quote=(_); end

  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#5
class SyntaxTree::Haml::PrettyPrint < ::SyntaxTree::Haml::Visitor
  # @return [PrettyPrint] a new instance of PrettyPrint
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#6
  def q; end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#html-comments-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#13
  def visit_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#doctype-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#27
  def visit_doctype(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#filter
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#42
  def visit_filter(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#haml-comments--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#50
  def visit_haml_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#plain-text
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#55
  def visit_plain(node); end

  # Visit the root node of the AST.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#60
  def visit_root(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#inserting_ruby
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#67
  def visit_script(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#running-ruby--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#77
  def visit_silent_script(node); end

  # Visit a tag node.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#85
  def visit_tag(node); end

  private

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#127
  def bool_field(name); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#132
  def group(name); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#143
  def pp_field(name, value); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#150
  def text_field(name, value); end
end

# This is the parent class of the various visitors that we provide to access
# the HAML syntax tree.
#
# source://syntax_tree-haml//lib/syntax_tree/haml.rb#22
class SyntaxTree::Haml::Visitor
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#23
  def visit(node); end
end

# source://syntax_tree/5.2.0/lib/syntax_tree/node.rb#6073
SyntaxTree::PATTERNS = T.let(T.unsafe(nil), Array)

# source://syntax_tree/5.2.0/lib/syntax_tree/version.rb#4
SyntaxTree::VERSION = T.let(T.unsafe(nil), String)
