# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree-rbs` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree-rbs`.

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#36
module RBS
  class << self
    # source://rbs/2.8.3/lib/rbs.rb#63
    def logger; end

    # source://rbs/2.8.3/lib/rbs.rb#60
    def logger_level; end

    # source://rbs/2.8.3/lib/rbs.rb#72
    def logger_level=(level); end

    # source://rbs/2.8.3/lib/rbs.rb#61
    def logger_output; end

    # source://rbs/2.8.3/lib/rbs.rb#67
    def logger_output=(val); end

    # source://rbs/2.8.3/lib/rbs.rb#77
    def print_warning; end
  end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#45
module RBS::AST; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#46
module RBS::AST::Declarations; end

# type foo = String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#52
class RBS::AST::Declarations::Alias < ::RBS::AST::Declarations::Base
  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#276
  def initialize(name:, type_params:, type:, annotations:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#285
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#53
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#272
  def annotations; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#274
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#285
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#294
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#273
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#269
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#298
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#271
  def type; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#270
  def type_params; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#47
class RBS::AST::Declarations::Base
  include ::SyntaxTree::RBS::Entrypoints
end

# class Foo end
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#59
class RBS::AST::Declarations::Class < ::RBS::AST::Declarations::Base
  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#97
  def initialize(name:, type_params:, super_class:, members:, annotations:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#107
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#60
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#93
  def annotations; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#95
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#107
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#117
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#94
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#91
  def members; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#89
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#92
  def super_class; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#121
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#90
  def type_params; end
end

# Foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#66
class RBS::AST::Declarations::Constant < ::RBS::AST::Declarations::Base
  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#317
  def initialize(name:, type:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#324
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#67
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#315
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#324
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#332
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#314
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#312
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#336
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#313
  def type; end
end

# $foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#73
class RBS::AST::Declarations::Global < ::RBS::AST::Declarations::Base
  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#353
  def initialize(name:, type:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#360
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#74
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#351
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#360
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#368
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#350
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#348
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#372
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#349
  def type; end
end

# interface _Foo end
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#80
class RBS::AST::Declarations::Interface < ::RBS::AST::Declarations::Base
  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#233
  def initialize(name:, type_params:, members:, annotations:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#242
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#81
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#227
  def annotations; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#229
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#242
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#251
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#228
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#226
  def members; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#224
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#255
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#225
  def type_params; end
end

# module Foo end
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#87
class RBS::AST::Declarations::Module < ::RBS::AST::Declarations::Base
  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#185
  def initialize(name:, type_params:, members:, self_types:, annotations:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#195
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#88
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#181
  def annotations; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#183
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#195
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#205
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#180
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#179
  def members; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#177
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#182
  def self_types; end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#209
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/declarations.rb#178
  def type_params; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/shims.rb#41
module RBS::AST::Members; end

# alias foo bar
# alias self.foo self.bar
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#101
class RBS::AST::Members::Alias < ::RBS::AST::Members::Base
  # source://rbs/2.8.3/lib/rbs/ast/members.rb#371
  def initialize(new_name:, old_name:, kind:, annotations:, location:, comment:); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#380
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#102
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#367
  def annotations; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#369
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#380
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#389
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#405
  def instance?; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#366
  def kind; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#368
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#364
  def new_name; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#365
  def old_name; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#409
  def singleton?; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#393
  def to_json(state = T.unsafe(nil)); end
end

# attr_accessor foo: Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#108
class RBS::AST::Members::AttrAccessor < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#109
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#296
  def to_json(state = T.unsafe(nil)); end
end

# attr_reader foo: Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#115
class RBS::AST::Members::AttrReader < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#116
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#278
  def to_json(state = T.unsafe(nil)); end
end

# attr_writer foo: Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#122
class RBS::AST::Members::AttrWriter < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#123
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#314
  def to_json(state = T.unsafe(nil)); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#95
class RBS::AST::Members::Base
  include ::SyntaxTree::RBS::Entrypoints
end

# self.@foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#129
class RBS::AST::Members::ClassInstanceVariable < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#130
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#126
  def to_json(state = T.unsafe(nil)); end
end

# @@foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#136
class RBS::AST::Members::ClassVariable < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#137
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#140
  def to_json(state = T.unsafe(nil)); end
end

# extend Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#143
class RBS::AST::Members::Extend < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#144
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#197
  def to_json(state = T.unsafe(nil)); end
end

# include Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#150
class RBS::AST::Members::Include < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#151
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#182
  def to_json(state = T.unsafe(nil)); end
end

# @foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#157
class RBS::AST::Members::InstanceVariable < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#158
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#112
  def to_json(state = T.unsafe(nil)); end
end

# def t: (T t) -> void
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#164
class RBS::AST::Members::MethodDefinition < ::RBS::AST::Members::Base
  # source://rbs/2.8.3/lib/rbs/ast/members.rb#19
  def initialize(name:, kind:, types:, annotations:, location:, comment:, overload:, visibility: T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#30
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#165
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#13
  def annotations; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#15
  def comment; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#30
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#41
  def hash; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#45
  def instance?; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#11
  def kind; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#14
  def location; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#10
  def name; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#16
  def overload; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#53
  def overload?; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#49
  def singleton?; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#70
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#12
  def types; end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#57
  def update(name: T.unsafe(nil), kind: T.unsafe(nil), types: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), overload: T.unsafe(nil), visibility: T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#17
  def visibility; end
end

# prepend Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#171
class RBS::AST::Members::Prepend < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#172
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#212
  def to_json(state = T.unsafe(nil)); end
end

# private
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#178
class RBS::AST::Members::Private < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#179
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#358
  def to_json(state = T.unsafe(nil)); end
end

# public
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#185
class RBS::AST::Members::Public < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#186
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/ast/members.rb#350
  def to_json(state = T.unsafe(nil)); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#37
class RBS::TypeName
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/type_name.rb#9
  def initialize(namespace:, name:); end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#79
  def +(other); end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#25
  def ==(other); end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#55
  def absolute!; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#59
  def absolute?; end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#40
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#51
  def alias?; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#47
  def class?; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#25
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#31
  def hash; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#67
  def interface?; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#7
  def kind; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#6
  def name; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#5
  def namespace; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#63
  def relative!; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#75
  def split; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#39
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#43
  def to_namespace; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#35
  def to_s; end

  # source://rbs/2.8.3/lib/rbs/type_name.rb#71
  def with_prefix(namespace); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#193
module RBS::Types; end

# Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#195
class RBS::Types::Alias
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#335
  def initialize(name:, args:, location:); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#198
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#331
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#357
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#349
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#345
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#341
  def to_json(state = T.unsafe(nil)); end
end

module RBS::Types::Bases; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#204
class RBS::Types::Bases::Any < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#207
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#213
class RBS::Types::Bases::Bool < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#216
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#222
class RBS::Types::Bases::Bottom < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#225
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#231
class RBS::Types::Bases::Class < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#234
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#240
class RBS::Types::Bases::Instance < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#243
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#103
  def sub(s); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#249
class RBS::Types::Bases::Nil < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#252
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#258
class RBS::Types::Bases::Self < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#261
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#267
class RBS::Types::Bases::Top < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#270
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#276
class RBS::Types::Bases::Void < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#279
  def accept(visitor); end
end

# Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#285
class RBS::Types::ClassInstance
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#293
  def initialize(name:, args:, location:); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#288
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#289
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#317
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#309
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#303
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#299
  def to_json(state = T.unsafe(nil)); end
end

# singleton(Foo)
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#294
class RBS::Types::ClassSingleton
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#171
  def initialize(name:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#176
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#297
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#176
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#182
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#169
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#199
  def map_type_name; end

  # source://rbs/2.8.3/lib/rbs/types.rb#168
  def name; end

  # source://rbs/2.8.3/lib/rbs/types.rb#189
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#193
  def to_s(level = T.unsafe(nil)); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#303
class RBS::Types::Function::Param
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#730
  def initialize(type:, name:, location: T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#736
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#306
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#736
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#742
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#728
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#746
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#727
  def name; end

  # source://rbs/2.8.3/lib/rbs/types.rb#754
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#758
  def to_s; end

  # source://rbs/2.8.3/lib/rbs/types.rb#726
  def type; end
end

# _Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#312
class RBS::Types::Interface
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#251
  def initialize(name:, args:, location:); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#315
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#247
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#275
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#267
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#261
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#257
  def to_json(state = T.unsafe(nil)); end
end

# foo & bar
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#321
class RBS::Types::Intersection
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#659
  def initialize(types:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#664
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#324
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#700
  def each_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#664
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#674
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#670
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#657
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#708
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#716
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#686
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#682
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#691
  def to_s(level = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#656
  def types; end
end

# 1
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#330
class RBS::Types::Literal
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#1194
  def initialize(literal:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1199
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#333
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1199
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1205
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1191
  def literal; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1192
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1214
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1218
  def to_s(level = T.unsafe(nil)); end
end

# foo?
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#339
class RBS::Types::Optional
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#521
  def initialize(type:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#526
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#342
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#560
  def each_type; end

  # source://rbs/2.8.3/lib/rbs/types.rb#526
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#536
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#532
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#519
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#575
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#568
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#544
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#540
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#548
  def to_s(level = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#518
  def type; end
end

# ^-> void
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#348
class RBS::Types::Proc
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#1099
  def initialize(location:, type:, block:, self_type: T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1106
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#351
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1095
  def block; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1158
  def each_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1106
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1116
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1112
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1097
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1176
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1167
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1096
  def self_type; end

  # source://rbs/2.8.3/lib/rbs/types.rb#1133
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1123
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1142
  def to_s(level = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#1094
  def type; end
end

# { foo: bar }
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#357
class RBS::Types::Record
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#445
  def initialize(fields:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#450
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#360
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#490
  def each_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#450
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#442
  def fields; end

  # source://rbs/2.8.3/lib/rbs/types.rb#460
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#456
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#443
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#505
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#498
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#472
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#468
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#477
  def to_s(level = T.unsafe(nil)); end
end

# [foo, bar]
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#366
class RBS::Types::Tuple
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#374
  def initialize(types:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#379
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#369
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#414
  def each_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#379
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#389
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#385
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#372
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#429
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#422
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#401
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#397
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#406
  def to_s(level = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#371
  def types; end
end

# foo | bar
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#375
class RBS::Types::Union
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#591
  def initialize(types:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#596
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#378
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#631
  def each_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#596
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#606
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#602
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#589
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#639
  def map_type(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#647
  def map_type_name(&block); end

  # source://rbs/2.8.3/lib/rbs/types.rb#618
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#614
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#623
  def to_s(level = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#588
  def types; end
end

# foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#384
class RBS::Types::Variable
  include ::SyntaxTree::RBS::Entrypoints

  # source://rbs/2.8.3/lib/rbs/types.rb#116
  def initialize(name:, location:); end

  # source://rbs/2.8.3/lib/rbs/types.rb#121
  def ==(other); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#387
  def accept(visitor); end

  # source://rbs/2.8.3/lib/rbs/types.rb#121
  def eql?(other); end

  # source://rbs/2.8.3/lib/rbs/types.rb#131
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#127
  def hash; end

  # source://rbs/2.8.3/lib/rbs/types.rb#112
  def location; end

  # source://rbs/2.8.3/lib/rbs/types.rb#111
  def name; end

  # source://rbs/2.8.3/lib/rbs/types.rb#141
  def sub(s); end

  # source://rbs/2.8.3/lib/rbs/types.rb#137
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/2.8.3/lib/rbs/types.rb#160
  def to_s(level = T.unsafe(nil)); end

  class << self
    # source://rbs/2.8.3/lib/rbs/types.rb#145
    def build(v); end

    # source://rbs/2.8.3/lib/rbs/types.rb#155
    def fresh(v = T.unsafe(nil)); end
  end
end

# source://rbs/2.8.3/lib/rbs/version.rb#4
RBS::VERSION = T.let(T.unsafe(nil), String)

# Previously this attribute didn't exist on some nodes. So if they don't have
# it, we're just going to apply it and have it return nil.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/shims.rb#36
module ShimVisibility
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/shims.rb#37
  def visibility; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/version.rb#3
module SyntaxTree
  class << self
    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#79
    def format(source, maxwidth = T.unsafe(nil), base_indentation = T.unsafe(nil), options: T.unsafe(nil)); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#93
    def mutation; end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#72
    def parse(source); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#101
    def read(filepath); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#67
    def register_handler(extension, handler); end

    # source://syntax_tree/5.2.0/lib/syntax_tree.rb#116
    def search(source, query, &block); end
  end
end

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#63
SyntaxTree::DEFAULT_INDENTATION = T.let(T.unsafe(nil), Integer)

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#55
SyntaxTree::DEFAULT_PRINT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#59
SyntaxTree::DEFAULT_RUBY_VERSION = T.let(T.unsafe(nil), SyntaxTree::Formatter::SemanticVersion)

# source://syntax_tree/5.2.0/lib/syntax_tree.rb#49
SyntaxTree::HANDLERS = T.let(T.unsafe(nil), Hash)

# source://syntax_tree/5.2.0/lib/syntax_tree/node.rb#6073
SyntaxTree::PATTERNS = T.let(T.unsafe(nil), Array)

# source://syntax_tree-rbs//lib/syntax_tree/rbs/version.rb#4
module SyntaxTree::RBS
  class << self
    # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#47
    def format(source, maxwidth = T.unsafe(nil)); end

    # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#55
    def parse(source); end

    # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#59
    def read(filepath); end
  end
end

# These are the methods that are going to be defined on each node of the
# AST. They each will create a visitor and enter into the visitor's walking
# algorithm.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#8
module SyntaxTree::RBS::Entrypoints
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#9
  def format(q); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#13
  def pretty_print(q); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#5
class SyntaxTree::RBS::Format < ::SyntaxTree::RBS::Visitor
  # @return [Format] a new instance of Format
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#6
  def q; end

  # Visit a RBS::AST::Declarations::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#17
  def visit_alias_declaration(node); end

  # Visit a RBS::AST::Members::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#35
  def visit_alias_member(node); end

  # Visit a RBS::Types::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#53
  def visit_alias_type(node); end

  # Visit a RBS::Types::Bases::Any node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_any_type(node); end

  # Visit a RBS::AST::Members::AttrAccessor node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#61
  def visit_attr_accessor_member(node); end

  # Visit a RBS::AST::Members::AttrReader node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#68
  def visit_attr_reader_member(node); end

  # Visit a RBS::AST::Members::AttrWriter node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#75
  def visit_attr_writer_member(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_base_type(node); end

  # Visit a RBS::Types::Bases::Bool node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_bool_type(node); end

  # Visit a RBS::Types::Bases::Bottom node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_bottom_type(node); end

  # Visit a RBS::AST::Declarations::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#88
  def visit_class_declaration(node); end

  # Visit a RBS::Types::ClassInstance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#108
  def visit_class_instance_type(node); end

  # Visit a RBS::AST::Members::ClassInstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#113
  def visit_class_instance_variable_member(node); end

  # Visit a RBS::Types::ClassSingleton node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#125
  def visit_class_singleton_type(node); end

  # Visit a RBS::Types::Bases::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_class_type(node); end

  # Visit a RBS::AST::Members::ClassVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#135
  def visit_class_variable_member(node); end

  # Visit a RBS::AST::Declarations::Constant node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#146
  def visit_constant_declaration(node); end

  # Visit a RBS::AST::Members::Extend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#157
  def visit_extend_member(node); end

  # Visit a RBS::Types::Function::Param node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#168
  def visit_function_param_type(node); end

  # Visit a RBS::AST::Declarations::Global node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#183
  def visit_global_declaration(node); end

  # Visit a RBS::AST::Members::Include node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#194
  def visit_include_member(node); end

  # Visit a RBS::Types::Bases::Instance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_instance_type(node); end

  # Visit a RBS::AST::Members::InstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#208
  def visit_instance_variable_member(node); end

  # Visit a RBS::AST::Declarations::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#219
  def visit_interface_declaration(node); end

  # Visit a RBS::Types::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#233
  def visit_interface_type(node); end

  # Visit a RBS::Types::Intersection node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#238
  def visit_intersection_type(node); end

  # Visit a RBS::Types::Literal node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#255
  def visit_literal_type(node); end

  # Visit a RBS::AST::Members::MethodDefinition node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#277
  def visit_method_definition_member(node); end

  # Visit a RBS::AST::Declarations::Module node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#330
  def visit_module_declaration(node); end

  # Visit a RBS::Types::Bases::Nil node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_nil_type(node); end

  # Visit a RBS::Types::Optional node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#355
  def visit_optional_type(node); end

  # Visit a RBS::AST::Members::Prepend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#361
  def visit_prepend_member(node); end

  # Visit a RBS::AST::Members::Private node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#372
  def visit_private_member(node); end

  # Visit a RBS::Types::Proc node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#377
  def visit_proc_type(node); end

  # Visit a RBS::AST::Members::Public node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#387
  def visit_public_member(node); end

  # Visit a RBS::Types::Record node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#392
  def visit_record_type(node); end

  # Visit a SyntaxTree::RBS::Root node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#419
  def visit_root(node); end

  # Visit a RBS::Types::Self node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_self_type(node); end

  # Visit a RBS::Types::Top node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_top_type(node); end

  # Visit a RBS::Types::Tuple node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#440
  def visit_tuple_type(node); end

  # Visit a RBS::TypeName node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#456
  def visit_type_name(node); end

  # Visit a RBS::Types::Union node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#461
  def visit_union_type(node); end

  # Visit a RBS::Types::Variable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#474
  def visit_variable_type(node); end

  # Visit a RBS::Types::Bases::Void node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_void_type(node); end

  private

  # An annotation can be attached to many kinds of nodes, and should be
  # printed using %a{}.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#485
  def print_annotations(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#503
  def print_attribute(type, node); end

  # Comments come in as one whole string, so here we split it up into
  # multiple lines and then prefix it with the pound sign.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#525
  def print_comment(node); end

  # Nodes which have members will all flow their printing through this
  # class, which keeps track of
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#538
  def print_members(node); end

  # (T t) -> void
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#554
  def print_method_signature(node); end

  # Certain nodes are names with optional arguments attached, as in
  # Array[A]. We handle all of that printing centralized here.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#653
  def print_name_and_args(node); end

  # Prints out the name of a class, interface, or module declaration.
  # Additionally loops through each type parameter if there are any and
  # print them out joined by commas. Checks for validation and variance.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#668
  def print_name_and_type_params(node); end
end

# A slight extension to the default PrettierPrint formatter that keeps track
# of the source (so that it can be referenced by annotations if they need
# it) and keeps track of the level of intersections and unions so that
# parentheses can be forced if necessary.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#24
class SyntaxTree::RBS::Formatter < ::PrettierPrint
  # @return [Formatter] a new instance of Formatter
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#27
  def initialize(source, *rest); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#33
  def force_parens; end

  # @return [Boolean]
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#41
  def force_parens?; end

  # Returns the value of attribute source.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#25
  def source; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#5
class SyntaxTree::RBS::PrettyPrint < ::SyntaxTree::RBS::Visitor
  # @return [PrettyPrint] a new instance of PrettyPrint
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#6
  def q; end

  # Visit a RBS::AST::Declarations::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#17
  def visit_alias_declaration(node); end

  # Visit a RBS::AST::Members::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#27
  def visit_alias_member(node); end

  # Visit a RBS::Types::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#38
  def visit_alias_type(node); end

  # Visit a RBS::Types::Bases::Any node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_any_type(node); end

  # Visit a RBS::AST::Members::AttrAccessor node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#46
  def visit_attr_accessor_member(node); end

  # Visit a RBS::AST::Members::AttrReader node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#55
  def visit_attr_reader_member(node); end

  # Visit a RBS::AST::Members::AttrWriter node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#64
  def visit_attr_writer_member(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_base_type(node); end

  # Visit a RBS::Types::Bases::Bool node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_bool_type(node); end

  # Visit a RBS::Types::Bases::Bottom node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_bottom_type(node); end

  # Visit a RBS::AST::Declarations::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#79
  def visit_class_declaration(node); end

  # Visit a RBS::Types::ClassInstance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#96
  def visit_class_instance_type(node); end

  # Visit a RBS::AST::Members::ClassInstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#101
  def visit_class_instance_variable_member(node); end

  # Visit a RBS::Types::ClassSingleton node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#109
  def visit_class_singleton_type(node); end

  # Visit a RBS::Types::Bases::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_class_type(node); end

  # Visit a RBS::AST::Members::ClassVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#117
  def visit_class_variable_member(node); end

  # Visit a RBS::AST::Declarations::Constant node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#125
  def visit_constant_declaration(node); end

  # Visit a RBS::AST::Members::Extend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#134
  def visit_extend_member(node); end

  # Visit a RBS::Types::Function::Param node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#143
  def visit_function_param_type(node); end

  # Visit a RBS::AST::Declarations::Global node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#151
  def visit_global_declaration(node); end

  # Visit a RBS::AST::Members::Include node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#160
  def visit_include_member(node); end

  # Visit a RBS::Types::Bases::Instance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_instance_type(node); end

  # Visit a RBS::AST::Members::InstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#172
  def visit_instance_variable_member(node); end

  # Visit a RBS::AST::Declarations::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#180
  def visit_interface_declaration(node); end

  # Visit a RBS::Types::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#190
  def visit_interface_type(node); end

  # Visit a RBS::Types::Intersection node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#195
  def visit_intersection_type(node); end

  # Visit a RBS::Types::Literal node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#200
  def visit_literal_type(node); end

  # Visit a RBS::AST::Members::MethodDefinition node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#205
  def visit_method_definition_member(node); end

  # Visit a RBS::AST::Declarations::Module node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#223
  def visit_module_declaration(node); end

  # Visit a RBS::Types::Bases::Nil node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_nil_type(node); end

  # Visit a RBS::Types::Optional node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#247
  def visit_optional_type(node); end

  # Visit a RBS::AST::Members::Prepend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#252
  def visit_prepend_member(node); end

  # Visit a RBS::AST::Members::Private node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#261
  def visit_private_member(node); end

  # Visit a RBS::Types::Proc node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#266
  def visit_proc_type(node); end

  # Visit a RBS::AST::Members::Public node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#271
  def visit_public_member(node); end

  # Visit a RBS::Types::Record node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#276
  def visit_record_type(node); end

  # Visit a SyntaxTree::RBS::Root node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#281
  def visit_root(node); end

  # Visit a RBS::Types::Self node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_self_type(node); end

  # Visit a RBS::Types::Top node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_top_type(node); end

  # Visit a RBS::Types::Tuple node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#292
  def visit_tuple_type(node); end

  # Visit a RBS::TypeName node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#297
  def visit_type_name(node); end

  # Visit a RBS::Types::Union node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#305
  def visit_union_type(node); end

  # Visit a RBS::Types::Variable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#310
  def visit_variable_type(node); end

  # Visit a RBS::Types::Bases::Void node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_void_type(node); end

  private

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#333
  def bool_field(name); end

  # -------------------------------------------------------------------------
  # Printing structure
  # -------------------------------------------------------------------------
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#323
  def group(name); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#338
  def pp_field(name, field); end

  # -------------------------------------------------------------------------
  # Printing certain kinds of nodes
  # -------------------------------------------------------------------------
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#354
  def print_annotations(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#368
  def print_attribute(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#395
  def print_comment(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#407
  def print_method_signature(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#485
  def print_name_and_args(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#495
  def print_name_and_type_params(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#344
  def visit_field(name, field); end
end

# This is the root node of the entire tree. It contains all of the top-level
# declarations within the file.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#20
class SyntaxTree::RBS::Root
  include ::SyntaxTree::RBS::Entrypoints

  # @return [Root] a new instance of Root
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#25
  def initialize(declarations); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#29
  def accept(visitor); end

  # Returns the value of attribute declarations.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#23
  def declarations; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/version.rb#5
SyntaxTree::RBS::VERSION = T.let(T.unsafe(nil), String)

# This is the parent class of any of the visitors that we define in this
# module. It is used to walk through the tree.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#14
class SyntaxTree::RBS::Visitor
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#15
  def visit(node); end
end

# source://syntax_tree/5.2.0/lib/syntax_tree/version.rb#4
SyntaxTree::VERSION = T.let(T.unsafe(nil), String)
